【详解】
一、view
1、强类型页面
2、Razor视图引擎简介
(1)强大的@：表示使用C#代码，相当于aspx中的<%%>
(2)可以完成输出功能
(3)当遇到html标签时会认为C#代码结束，不会贪婪匹配后面的内容，如@a1会认为是变量a1，如@a<br>1会认为是变量a
(4)会对标签内容进行HTML编码
(5)注释：@*注释内容*@这种注释是服务器的注释，<!--注释-->这是客户端的注释
(6)引入命名空间：@using 命名空间;


3、HTMLhelper帮助类
(1)helper：是为了方便view的开发二产生的
(2)HTMLhelper的演变
 1)普通链接:<a href="/home/index">首页</a>
 2)当路由规则改变时，几乎所有的超链接都要更改
 3)借助URL根据路由规则生成链接地址：<a href="@Url.Action("Index","home")">首页></a>
 4)缺陷是不能编译时排错，只有运行时才知道是否正确
 5)专门用于MVC的链接方式:Html.Action("Home","Index")，会根据路由规则生成a标记，并且在运行时可以进行有效性检查，不需要用户点击链接后才知道链接出错了


4、Raw：输出
5、Encode：进行HTML编码
6、Action：服务器端其他页面
7、表单控件
(1)类型一：Html.表单类型("表单名称"),以字符串为参数
(2)类型二：Html.表单类型For("表单名称")，以Expression<Func<TObject,Tproperty>>为参数，一般用于强类型页面，委托表达式
(3)自动装配：根据参数生成控件name，id属性，赋值会根据ViewData中同名键获取数据赋值给value属性
8、表单方式一：using(Html.beginFrom(actionName.ControllerName)){}
9、表单方式二：
(1)@Html.BeginForm(actionName.controllerName)
(2)@{Html.EndForm();}

10、定义强类型的作用：
实现了编译时错误检查，放置对于对象的属性的编写错误
怎么用：@model 类型，写在页面的最上面
访问：ViewData.Model/Html.类型For(c=>c.属性)

11、扩展方法：这个方法不是定义在原始类文件中的，是被扩展进去的，这种方法叫做扩展方法。
扩展方法只有在不能改变源代码的时候，但是又要改变代码，则使用扩展方法


支持HTML代码和C#代码混编模式